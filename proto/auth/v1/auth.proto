syntax = "proto3";

package auth.v1;

// Use module import path with package alias for Go codegen
option go_package = "./proto/auth/v1";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

service AuthService {
  // Health
  // Returns service health and optional details
  rpc HealthCheck(google.protobuf.Empty) returns (HealthCheckResponse);

  // User management
  // Registers a new user under a client
  rpc RegisterUser(RegisterUserRequest) returns (RegisterUserResponse);
  // Changes the password for the authenticated user (requires access_token)
  rpc ChangeUserPassword(ChangeUserPasswordRequest) returns (ChangeUserPasswordResponse);

  // Client management
  // Registers a new client and returns its credentials
  rpc RegisterClient(RegisterClientRequest) returns (RegisterClientResponse);
  // Rotates a client's secret after validating the current one
  rpc ChangeClientSecret(ChangeClientSecretRequest) returns (ChangeClientSecretResponse);

  // Token management
  // Issues access and refresh tokens for a user (aka login)
  rpc GetToken(GetTokenRequest) returns (GetTokenResponse);
  // Exchanges a refresh token for a new access token (and refresh token)
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);
  // Revokes a refresh token (logout)
  rpc RevokeToken(RevokeTokenRequest) returns (RevokeTokenResponse);
  // Validates an access token and returns profile info
  rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse);
}

message HealthCheckResponse {
    enum Status {
        SERVING = 0;
        NOT_SERVING = 1;
        SERVICE_UNKNOWN = 2;
    }
    Status status = 1;
    string message = 2;
    map<string, string> details = 3;
}

message RegisterUserRequest {
    string username = 1;
    string email = 2;
    string password = 3;
    string client_id = 4;
}

message RegisterUserResponse {
    bool success = 1;
    string message = 2;
    string user_id = 3;
}

// Token issuance (login)
message GetTokenRequest {
  string email = 1;       // required
  string password = 2;    // required
  string client_id = 3;   // required
  string user_agent = 4;  // optional
}

message GetTokenResponse {
  bool success = 1;
  string message = 2;
  string access_token = 3;
  string refresh_token = 4;
  google.protobuf.Timestamp expires_at = 5;
  UserProfile user = 6;
}

message ValidateTokenRequest {
    string access_token = 1;
}

message ValidateTokenResponse {
    bool valid = 1;
    string message = 2;
    string user_id = 3;
    google.protobuf.Timestamp expires_at = 4;
    // Full user profile returned for convenience
    UserProfile user = 5;
}

message RefreshTokenRequest {
    string refresh_token = 1;
    string client_id = 2;
}

message RefreshTokenResponse {
    bool success = 1;
    string message = 2;
    string access_token = 3;
    string refresh_token = 4;
    google.protobuf.Timestamp expires_at = 5;
}

// Token revoke (logout)
message RevokeTokenRequest {
  string refresh_token = 1; // required
}

message RevokeTokenResponse {
  bool success = 1;
  string message = 2;
}

message RegisterClientRequest {
    string client_name = 1;
}

message RegisterClientResponse {
    bool success = 1;
    string message = 2;
    string client_id = 3;
    string client_secret = 4;
}

message ChangeUserPasswordRequest {
    string access_token = 1;
    string current_password = 2;
    string new_password = 3;
}

message ChangeUserPasswordResponse {
    bool success = 1;
    string message = 2;
}

message UserProfile {
    string user_id = 1;
    string username = 2;
    string email = 3;
    string client_id = 4;
    google.protobuf.Timestamp created_at = 5;
}

// Client secret change
message ChangeClientSecretRequest {
    string client_id = 1;
    string current_secret = 2;
    string new_secret = 3; // if empty, server may generate a new one
}

message ChangeClientSecretResponse {
    bool success = 1;
    string message = 2;
    string client_id = 3;
    string client_secret = 4; // returned when rotated/generated
}